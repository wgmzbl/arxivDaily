<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Arxiv Viewer</title>
  <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
  <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
  <link rel="stylesheet" href="https://www.unpkg.com/katex@0.16.9/dist/katex.min.css" integrity="sha384-n8MVd4RsNIU0tAv4ct0nTaAbDJwPJzDEaqSD1odI+WdtXRGWt2kTvGFasHpSy3SV" crossorigin="anonymous">
  <script defer src="https://www.unpkg.com/katex@0.16.9/dist/katex.min.js" integrity="sha384-XjKyOOlGwcjNTAIQHIpgOno0Hl1YQqzUOEleOLALmuqehneUG+vnGctmUb0ZY0l8" crossorigin="anonymous"></script>
  <script defer src="https://www.unpkg.com/katex@0.16.9/dist/contrib/auto-render.min.js" integrity="sha384-+VBxd3r6XgURycqtZ117nYw44OOcIax56Z4dCRWbxyPt0Koah1uHoK0o4+/RRE05" crossorigin="anonymous" onload="renderMathInElement(document.body);"></script>
  <script defer src="https://www.unpkg.com/katex@0.16.9/dist/katex.js" integrity="sha384-ImWHyYvDPlRzwFnvLhG9Jcpm/7qL4SVIuJK0C6Rj+Mf7fpeNJCLCynC+EVz4kCSA" crossorigin="anonymous"></script>
  <script src="https://www.unpkg.com/sortablejs@1.15.0/Sortable.min.js"></script>

  <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
  <link rel="stylesheet" href="https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.css">
  <link rel="stylesheet" href="/css/styles.css">

</head>

<body>
  <div class="header">
    <div id="menuWithHidden">
      <div id="category"></div>
      <div id="hiddenMenuDiv">
        <p>Hidden Menu</p>
        <ul id="hiddenMenu" class="menu">
        </ul>
      </div>

      <div class="menu-toggle">
        <button class="menu-toggle">
          <div class="bar"></div>
          <div class="bar"></div>
          <div class="bar"></div>
        </button>
      </div>
    </div>
    <div class="header-title">
      Daily <%= category %>
    </div>
    <button id="settingsBtn" class="settings-icon"><i class="fa fa-cog"></i></button>
  </div>
  <div id="settingsMenu">
    <% if (loggedIn) {%>
    <div class="entry-title">Welcome <%= user %></div>
    <button class='mobile-button' onclick="window.location.href='/user'">User info</button>
    <button class='mobile-button' onclick="window.location.href='/logout'">Logout</button>
    <% } else { %>
    <button class='mobile-button' onclick="window.location.href='/login'">Login</button>
    <% } %>

    <label>
      <input class="toggleCheckbox" type="checkbox" checked id="toggleCalendar">
      <span class="slider"></span>
      Show calendar
    </label>
    <label>
      <input class="toggleCheckbox" type="checkbox" checked id="toggleAuthors">
      <span class="slider"></span>
      Show authors
    </label>
    <label>
      <input class="toggleCheckbox" type="checkbox" id="toggleComments">
      <span class="slider"></span>
      Show comments
    </label>
    <label>
      <input class="toggleCheckbox" type="checkbox" id="toggleSubmitTime">
      <span class="slider"></span>
      Show submit time
    </label>
    <label>
      <input class="toggleCheckbox" type="checkbox" checked id="toggleSubjects">
      <span class="slider"></span>
      Show subjects
    </label>
    <label>
      <input class="toggleCheckbox" type="checkbox" checked id="toggleSummary">
      <span class="slider"></span> <!-- This is the toggle switch -->
      Show summary
    </label>
    <!--<label>
      <button id="edit-btn" class="mobile-button">Edit Menu</button>
      <button id="complete-btn" style="display:none;" class="mobile-button">Complete</button>
    </label>
    <div class="settings-menu-footer">
      <a class="transparent-link" href="/login">Login</a>
    </div>-->
  </div>
  <div id="backToTop" class="draggable">
    <i class="fa fa-arrow-circle-up" aria-hidden="true"></i>
  </div>

  <div id="datePicker" , class="calendar"></div>
  <div id="content"></div>

  <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
  <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
  <script>
    $(document).ready(function() {
      $.get('/read/<%= category %>')
        .done(function(readData) {
          if ("message" in readData) {
            console.log(readData.message);
            return;
          }
          const today = new Date().toISOString().split('T')[0].replace(/-/g, '');
          const availableDates = Object.keys(readData);
          const closestDate = findClosestDate(today, availableDates);

          $('#datePicker').datepicker({
            beforeShow: function(input, inst) {
              $('td a', inst.dpDiv).each(function() {
                $(this).parent('td').text($(this).text());
              });
            },
            beforeShowDay: function(date) {
              const yymmdd = formatDateForComparison(date);
              if (availableDates.includes(yymmdd)) {
                const highlightClass = `${<%= loggedIn %> ? (readData[yymmdd] ? "highlightgrey" : "highlight") : "highlightgrey"}`;
                return [true, `${ highlightClass } ui-datepicker-day`, 'Read'];
              }
              return [false, 'ui-datepicker-day', 'Unavailable'];
            },
            onSelect: function(dateText) {
              const formattedDate = formatDateForComparison(new Date(dateText));
              fetchData(formattedDate, '<%= category %>');

            }
          });
          showMenu();
          $("#datepicker").datepicker("setDate", formatDate(closestDate));
          fetchData(closestDate, '<%= category %>');
        });
      settingMenu();
    });

    function formatDateForComparison(date) {
      const yy = date.getFullYear().toString().slice(2);
      const mm = String(date.getMonth() + 1).padStart(2, '0');
      const dd = String(date.getDate()).padStart(2, '0');
      return yy + mm + dd;
    }

    function setDragMenu() {
      var menuShow = $('#menu')[0];
      var sortableMenu = new Sortable(menuShow, {
        group: 'shared',
        disabled: true,
        animation: 150,
        store: {
          set: function(sortable) {
            var order = sortable.toArray();
            localStorage.setItem('menu', JSON.stringify(order));
          },
          get: function() {
            return JSON.parse(localStorage.getItem('menu') || '[]');
          }
        }
      });

      var menuHidden = $('#hiddenMenu')[0];
      var hiddenMenu = new Sortable(menuHidden, {
        group: 'shared',
        disabled: true,
        animation: 150,
        store: {
          set: function(sortable) {
            var order = sortable.toArray();
            localStorage.setItem('hiddenMenu', JSON.stringify(order));
          },
          get: function() {
            return JSON.parse(localStorage.getItem('hiddenMenu') || '[]');
          }
        }
      });

      $('#edit-btn').on('click', function() {
        toggleMenuState(sortableMenu, hiddenMenu, false, 'inline', 'wrap');
        $('#settingsMenu').toggleClass('hidden');
        $('.menu li').addClass('margin-bottom');
      });

      $('#complete-btn').on('click', function() {
        toggleMenuState(sortableMenu, hiddenMenu, true, 'none', 'nowrap');
        $('#settingsMenu').toggleClass('hidden');
        $('.menu li').removeClass('margin-bottom');
      });
    }

    function toggleMenuState(sortableMenu, hiddenMenu, isDisabled, hiddenMenuDisplay, flexWrapStyle) {
      sortableMenu.option('disabled', isDisabled);
      hiddenMenu.option('disabled', isDisabled);
      $('#edit-btn').css('display', isDisabled ? 'inline' : 'none');
      $('#hiddenMenuDiv').css('display', hiddenMenuDisplay);
      $('#complete-btn').css('display', isDisabled ? 'none' : 'inline');
      $('#hiddenMenu, #menu').css('flex-wrap', flexWrapStyle);
    }

    function showMenu() {
      $.get('/getUserCategories')
        .done(function(result) {
          const contentDiv = $('#category');
          const contentMenu = $('<ul class="menu" id="menu"></ul>');
          contentDiv.empty();

          if ("categories" in result) {
            result["categories"].forEach(category => {
              let innerText = "categoriesStr" in result && category in result["categoriesStr"] ?
                result["categoriesStr"][category] :
                category;
              contentMenu.append(`<li class="${('<%=category%>' === category) ? 'active' : ''}" id="item-${category}" data-id="${category}"><a class="single-line" href="/${category}">${innerText}</a></li>`);
            });
          }

          contentDiv.append(contentMenu);
          preventscroll();
        });
    }

    function adjustMenuFromLocalStorage() {
      ['menu', 'hiddenMenu'].forEach(function(key) {
        const order = getLocalStorageItem(key);
        if (order) {
          order.forEach(function(id) {
            const item = $(`#item-${id}`.replace(/\./g, '\\.'));
            if (item) {
              $(`#${key}`).append(item);
            }
          });
        }
      });
    }

    function getLocalStorageItem(key) {
      const storedData = localStorage.getItem(key);
      return storedData ? JSON.parse(storedData) : null;
    }


    function findClosestDate(targetDate, availableDates) {
      let closestDate = availableDates[0];
      let closestDiff = Math.abs(targetDate - closestDate);
      for (let i = 1; i < availableDates.length; i++) {
        const diff = Math.abs(targetDate - availableDates[i]);
        if (diff < closestDiff) {
          closestDiff = diff;
          closestDate = availableDates[i];
        }
      }
      return closestDate;
    }

    function triggerAllCheckboxes() {
      $('.toggleCheckbox').each(function() {
        $(this).trigger('change');
      });
    }

    function fetchData(date, category) {
      <% if (loggedIn) { %>
      updateDate(date);
      <% } %>
      const contentDiv = $('#content');
      contentDiv.empty().append('<div class="title-type"><i class="fa fa-spinner fa-pulse fa-2x fa-fw"></i><div>');

      $.get(`/${category}/${date}`)
        .done(function(data) {
          contentDiv.empty();

          if ('message' in data) {
            contentDiv.append(`<p>${data.message === 'No articles' ? data.message : 'Invalid request'}</p>`);
            return;
          }

          ['New', 'New-Cross','Update','Update-Cross'].forEach(strs => {
            if (!(strs in data)) return;
            contentDiv.append(`<div class="title-type">${strs} (${formatDate2(date)})</div>`);
            data[strs].forEach(entry => {
              const entryDiv = $('<div class="entry"></div>');
              entryDiv.append(`<div class="entry-title">${entry.Title}</div>`)
                .append(`<p class="entry-author authors">Authors: ${entry.Authors}</p>`)
                .append(entry['arxiv_comment'] ? `<p class="entry-comments comments">Comments: ${entry['arxiv_comment']}</p>` : '')
                .append(createSubjects(entry.subject))
                .append(entry.submitTime ? `<p class="entry-submitTime submitTime">Submit time: ${entry.submitTime}</p>` : '')
                .append(`<p class="entry-summary summary">Summary: ${entry.Summary}</p>`)
                .append(`<button class='mobile-button' onclick="openLink(event,'${entry['PDF Link']}')">Open <i class="fa fa-file-pdf-o"></i></button>`);
              <% if (loggedIn && isAdmin) { %>
              entryDiv.append(`<button class='mobile-button' onclick="downloadurl(this,event,'${entry['Arxiv ID']}','${date}', 'interesting', '<%=category%>')"><i class="fa fa-download"></i> Intersting</button>`)
                .append(`<button class='mobile-button' onclick="downloadurl(this,event,'${entry['Arxiv ID']}','${date}', 'related', '<%=category%>')"><i class="fa fa-download"></i> Related</button>`);
              <% } %>
              <% if (loggedIn) { %>
              entryDiv.append(`<button class='mobile-button' onclick="saveFavor(this,event,'${entry['Arxiv ID']}','${date}', 'interesting', '<%=category%>')"><i class="fa fa-star-o"></i></button>`);
              <% } %>
              entryDiv.append('<button class="hideDetails mobile-button" style="display:none"><i class="fa fa-chevron-up"></i></button>')
                .append(`<div class="loading entry-title"></div>`);
              contentDiv.append(entryDiv);
              triggerAllCheckboxes();
              contentDiv.data('entry', entry); // Store the entry data for later use
              renderMath();
              showHideContent();
              showDetailsWhenClick();
            });
          });
        });
    }

    function showDetailsWhenClick() {
      $('.entry').off('click').on('click', function() {
        if ($(this).children('.hideDetails').length === 0) {
          $(this).append('<button class="hideDetails mobile-button" style="display:none"><i class="fa fa-chevron-up"></i></button>');
        }

        if ($(this).children('.hideDetails').css('display') === 'none') {
          $(this).children().each(function() {
            $(this).data('original-display', $(this).css('display')).show();
          });
        }


        $(this).children('.hideDetails').off('click').on('click', function() {
          event.stopPropagation();
          $(this).parent().children('div, p').each(function() {
            var originalDisplay = $(this).data('original-display');
            $(this).css('display', originalDisplay);
          });
          $(this).hide();
        });

      });
    }

    function formatDate2(yymmdd) {
      const date = new Date(parseInt(yymmdd.substring(0, 2), 10) + 2000, parseInt(yymmdd.substring(2, 4), 10) - 1, parseInt(yymmdd.substring(4, 6), 10));
      return date.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    }

    function createSubjects(subjectData) {
      if (!subjectData) return '';
      const contentP = $('<p class="entry-subjects subjects">Subjects: </p>');
      if (subjectData.primary_subject) {
        contentP.append(`<span class="primaryCategory">${subjectData.primary_subject}</span>`);
      }
      if (subjectData.other_subjects) {
        subjectData.other_subjects.forEach(subject => contentP.append(` ${subject}`));
      }
      return contentP;
    }


    function openLink(event, link) {
      event.stopPropagation();
      window.open(link, '_blank');
    }

    function formatDate(dateStr) {
      // Assuming dateStr is in the format yymmdd
      const year = '20' + dateStr.slice(0, 2);
      const month = dateStr.slice(2, 4);
      const day = dateStr.slice(4, 6);
      return `${year}-${month}-${day}`;
    };
    <% if (loggedIn) { %>
    async function updateDate(yymmdd) {
      const response = await fetch('/update-date', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          date: yymmdd,
          category: '<%= category %>'
        })
      });
      const result = await response.json();
    };
    async function saveFavor(element, event, id, date, type, category) {
      event.stopPropagation();
      $(element).parent().children('.loading').empty().append('<i class="fa fa-spinner fa-pulse fa-fw"></i>');
      const response = await fetch('/saveFavor', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          id: id,
          date: date,
          category: category
        })
      });
      if (response.ok) {
        json = await response.json();
        if (json.message === 'Success') {
          $(element).parent().children('.loading').empty().append('<i class="fa fa-check"></i>');
        } else if (json.message === 'Fail') {
          $(element).parent().children('.loading').empty().append('<i class="fa fa-times"></i>');
        } else {
          $(element).parent().children('.loading').empty().append('<i class="fa fa-times"></i> ' + json.message);
        }
      }
    };
    <% } %>
    <% if (loggedIn && isAdmin) { %>
    async function downloadurl(element, event, id, date, type, category) {
      event.stopPropagation();
      $(element).parent().children('.loading').empty().append('<i class="fa fa-spinner fa-pulse fa-fw"></i>');
      const response = await fetch('/download', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          id: id,
          date: date,
          type: type,
          category: category
        })
      });
      if (response.ok) {
        json = await response.json();
        if (json.message === 'Success') {
          $(element).parent().children('.loading').empty().append('<i class="fa fa-check"></i>');
        } else if (json.message === 'Fail') {
          $(element).parent().children('.loading').empty().append('<i class="fa fa-times"></i>');
        } else {
          $(element).parent().children('.loading').empty().append('<i class="fa fa-times"></i> ' + json.message);
        }
      }
    };
    <% } %>

    function settingMenu() {
      // Toggle settings menu
      $('#settingsBtn').on('click', function() {
        $('#settingsMenu').toggle();
      });

      // Array of all settings checkboxes
      const settingsCheckboxes = ['toggleCalendar', 'toggleAuthors', 'toggleComments', 'toggleSubjects', 'toggleSubmitTime', 'toggleSummary'];

      settingsCheckboxes.forEach(function(checkboxId) {
        const $checkbox = $(`#${checkboxId}`);
        const contentId = lowercaseFirstLetter(checkboxId.replace('toggle', ''));

        // Apply stored settings
        const storedSetting = localStorage.getItem(checkboxId);
        if (storedSetting === null) {
          localStorage.setItem(checkboxId, $checkbox.prop('checked'));
        }
        else{
          $checkbox.prop('checked', storedSetting === 'true');
        }

        // Change event for checkboxes
        $checkbox.on('change', function() {
          $(`.${contentId}`).toggle(this.checked);
          localStorage.setItem(checkboxId, this.checked);
        });
      });

      $('.menu-toggle button').on('click', function() {
        $('#category').toggle();
      });
    }

    function showHideContent() {
      const settingsCheckboxes = ['toggleCalendar', 'toggleAuthors', 'toggleComments', 'toggleSubjects', 'toggleSubmitTime', 'toggleSummary'];
      settingsCheckboxes.forEach(function(checkboxId) {
        const contentId = lowercaseFirstLetter(checkboxId.replace('toggle', ''));
        $(`.${contentId}`).toggle(localStorage.getItem(checkboxId) === 'true');
      });
    }


    function lowercaseFirstLetter(str) {
      return str.charAt(0).toLowerCase() + str.slice(1);
    }


    function preventscroll() {
      $('.menu').on('wheel', function(e) {
        var deltaY = e.originalEvent.deltaY;
        var contentHeight = this.scrollHeight;
        var visibleHeight = $(this).height();
        var scrollTop = $(this).scrollTop();

        if ((scrollTop === 0 && deltaY < 0) || (scrollTop + visibleHeight >= contentHeight && deltaY > 0)) {
          e.preventDefault();
        }
      });
    }


    function renderMath() {
      renderMathInElement(document.body, {
        delimiters: [{
            left: '$$',
            right: '$$',
            display: true
          },
          {
            left: '$',
            right: '$',
            display: false
          },
          {
            left: '\\(',
            right: '\\)',
            display: false
          },
          {
            left: '\\[',
            right: '\\]',
            display: true
          }
        ],
        // • rendering keys, e.g.:
        throwOnError: false
      });
    }

    function setUpBtn() {
      var posTop = localStorage.getItem('posTop');
      var posisLeft = localStorage.getItem('posisLeft');
      if (posTop && parseInt(posTop, 10) <= $(window).height()) {
        $('#backToTop').css('top', posTop + 'px');
      }
      var val = $(window).width() < 768 ? '0px' : '20px';

      if (!posisLeft || posisLeft === 'true') {
        $('#backToTop').css('left', val);
        $('#backToTop').css('right', "");
      } else {
        $('#backToTop').css('right', val);
        $('#backToTop').css('left', "");
      }
    }


    $(document).ready(function() {
      renderMath();
      setUpBtn();

      var $backToTopButton = $('#backToTop');
      let isDragging = false;

      function moveButtonTo(pageX, pageY) {
        const shiftX = $backToTopButton.outerWidth() / 2;
        const shiftY = $backToTopButton.outerHeight() / 2;

        localStorage.setItem('posisLeft', pageX < $(window).width() / 2 ? true : false);

        $backToTopButton.css({
          'top': (pageY - shiftY) + 'px',
          'left': (pageX - shiftX) + 'px'
        });
        localStorage.setItem('posTop', pageY - shiftY);
      }

      function startDrag(event) {
        event.preventDefault();
        isDragging = false;

        let initialX = event.type === 'mousedown' ? event.clientX : event.touches[0].clientX;
        let initialY = event.type === 'mousedown' ? event.clientY : event.touches[0].clientY;

        $(document).on('mousemove touchmove', function(moveEvent) {
          isDragging = true;
          let currentX = moveEvent.type === 'mousemove' ? moveEvent.clientX : moveEvent.touches[0].clientX;
          let currentY = moveEvent.type === 'mousemove' ? moveEvent.clientY : moveEvent.touches[0].clientY;
          moveButtonTo(currentX, currentY);
        });

        $(document).one('mouseup touchend', function() {
          $(document).off('mousemove touchmove');
        });
      }

      $backToTopButton.on('mousedown touchstart', function(event) {
        if (event.type === 'touchstart') {
          isDragging = false;
          $(this).addClass('active');
        }
        startDrag(event);
      });

      $backToTopButton.on('click touchend', function(event) {
        $(this).removeClass('active');
        if (!isDragging) {
          $('html, body').animate({
            scrollTop: 0
          }, 'smooth');
        }
        setUpBtn();
        isDragging = false;
      });

      $backToTopButton.on('dragstart', function() {
        return false;
      });

    });
  </script>
</body>

</html>