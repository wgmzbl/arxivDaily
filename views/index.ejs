<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Arxiv Viewer</title>
  <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
  <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
  <link rel="stylesheet" href="https://www.unpkg.com/katex@0.16.9/dist/katex.min.css"
    integrity="sha384-n8MVd4RsNIU0tAv4ct0nTaAbDJwPJzDEaqSD1odI+WdtXRGWt2kTvGFasHpSy3SV" crossorigin="anonymous">
  <script defer src="https://www.unpkg.com/katex@0.16.9/dist/katex.min.js"
    integrity="sha384-XjKyOOlGwcjNTAIQHIpgOno0Hl1YQqzUOEleOLALmuqehneUG+vnGctmUb0ZY0l8"
    crossorigin="anonymous"></script>
  <script defer src="https://www.unpkg.com/katex@0.16.9/dist/contrib/auto-render.min.js"
    integrity="sha384-+VBxd3r6XgURycqtZ117nYw44OOcIax56Z4dCRWbxyPt0Koah1uHoK0o4+/RRE05" crossorigin="anonymous"
    onload="renderMathInElement(document.body);"></script>
  <script defer src="https://www.unpkg.com/katex@0.16.9/dist/katex.js"
    integrity="sha384-ImWHyYvDPlRzwFnvLhG9Jcpm/7qL4SVIuJK0C6Rj+Mf7fpeNJCLCynC+EVz4kCSA"
    crossorigin="anonymous"></script>
  <script src="https://www.unpkg.com/sortablejs@1.15.0/Sortable.min.js"></script>

  <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <link rel="stylesheet" href="/css/styles.css">

</head>

<body>
  <div class="header">
    <div id="menuWithHidden">
      <div id="category"></div>
      <div id="hiddenMenuDiv">
        <p>Hidden Menu</p>
        <ul id="hiddenMenu" class="menu">
        </ul>
      </div>

      <div class="menu-toggle">
        <button class="menu-toggle">
          <div class="bar"></div>
          <div class="bar"></div>
          <div class="bar"></div>
        </button>
      </div>
    </div>
    <div class="header-title">
      Daily <%= category %>
    </div>
    <button id="settingsBtn" class="settings-icon"><i class="fas fa-cog"></i></button>
  </div>
  <div id="settingsMenu" class="hidden">
    <label>
      <input class="toggleCheckbox" type="checkbox" checked id="toggleCalendar">
      <span class="slider"></span> <!-- This is the toggle switch -->
      Show calendar
    </label>
    <label>
      <input class="toggleCheckbox" type="checkbox" checked id="toggleAuthors">
      <span class="slider"></span> <!-- This is the toggle switch -->
      Show authors
    </label>
    <label>
      <input class="toggleCheckbox" type="checkbox" id="toggleComments">
      <span class="slider"></span> <!-- This is the toggle switch -->
      Show comments
    </label>
    <label>
      <input class="toggleCheckbox" type="checkbox" id="toggleSubmitTime">
      <span class="slider"></span> <!-- This is the toggle switch -->
      Show submit time
    </label>
    <label>
      <input class="toggleCheckbox" type="checkbox" checked id="toggleSubjects">
      <span class="slider"></span> <!-- This is the toggle switch -->
      Show subjects
    </label>
    <label>
      <input class="toggleCheckbox" type="checkbox" checked id="toggleSummary">
      <span class="slider"></span> <!-- This is the toggle switch -->
      Show summary
    </label>
    <label>
      <button id="edit-btn" class="mobile-button">Edit Menu</button>
      <button id="complete-btn" style="display:none;" class="mobile-button">Complete</button>
    </label>
    <div class="settings-menu-footer">
      <a class="transparent-link" href="/login">Login</a>
    </div>
  </div>
  <div id="backToTop" class="draggable">
    <i class="fa fa-arrow-circle-up" aria-hidden="true"></i>
  </div>

  <div id="datePicker" , class="calendar"></div>
  <div id="content"></div>

  <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
  <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
  <script>
    $(document).ready(function () {
      fetch('/read/<%= category %>')
        .then(response => response.json())
        .then(readData => {
          if ("message" in readData) {
            console.log(readData.message);
            return;
          }
          const today = new Date().toISOString().split('T')[0].replace(/-/g, '');
          const availableDates = Object.keys(readData);
          const closestDate = findClosestDate(today, availableDates);
          console.log(closestDate)
          $('#datePicker').datepicker({
            beforeShow: function (input, inst) {
              $('td a', inst.dpDiv).each(function () {
                const text = $(this).text();
                console.log(text);
                $(this).parent('td').text(text);
              });
            },
            beforeShowDay: function (date) {
              const yymmdd = $.datepicker.formatDate('yymmdd', date).slice(2, 8);
              if (availableDates.includes(yymmdd)) {
                <% if (loggedIn) { %>
                if (readData[yymmdd] === true) {
                    return [true, 'highlightgrey ui-datepicker-day', 'Read'];
                  } else if (readData[yymmdd] === false) {
                    return [true, 'highlight ui-datepicker-day', 'Read'];
                  }
                <% } else { %>
                return [true, 'highlightgrey ui-datepicker-day', 'Read'];
                <% } %>
              }
              return [false, 'ui-datepicker-day', 'un'];
            },
            onSelect: function (dateText, inst) {
              // Parse the dateText to a Date object
              const dateObj = new Date(dateText);
              // Format the date to yymmdd
              const yy = dateObj.getFullYear().toString().slice(2);
              const mm = String(dateObj.getMonth() + 1).padStart(2, '0');
              const dd = String(dateObj.getDate()).padStart(2, '0');
              const formattedDate = yy + mm + dd;
              console.log('<%= category %>');
              fetchData(formattedDate, '<%= category %>');
            }
          });
          showMenu();
          console.log('setting date.' + closestDate);
          $("#datepicker").datepicker("setDate", formatDate(closestDate));
          fetchData(closestDate, '<%= category %>');
        });
    });

    function setDragMenu() {
      var menuShow = document.getElementById('menu');
      var sortableMenu = new Sortable(menuShow, {
        group: 'shared',
        disabled: true,
        animation: 150,
        store: {
          set: function (sortable) {
            var order = sortable.toArray();
            localStorage.setItem('menu', JSON.stringify(order));
          },
          get: function () {
            return JSON.parse(localStorage.getItem('menu') || '[]');
          }
        }
      });

      var menuHidden = document.getElementById('hiddenMenu');
      var hiddenMenu = new Sortable(menuHidden, {
        group: 'shared',
        disabled: true,
        animation: 150,
        store: {
          set: function (sortable) {
            var order = sortable.toArray();
            localStorage.setItem('hiddenMenu', JSON.stringify(order));
          },
          get: function () {
            return JSON.parse(localStorage.getItem('hiddenMenu') || '[]');
          }
        }
      });

      const editBtn = document.getElementById('edit-btn');
      const completeBtn = document.getElementById('complete-btn');
      editBtn.addEventListener('click', function () {
        sortableMenu.option('disabled', false);
        hiddenMenu.option('disabled', false);
        editBtn.style.display = 'none';
        document.getElementById('hiddenMenuDiv').style.display = 'inline';
        completeBtn.style.display = 'inline';
        document.getElementById('hiddenMenu').style.flexWrap = 'wrap';
        document.getElementById('menu').style.flexWrap = 'wrap';
        document.getElementById('settingsMenu').classList.toggle('hidden');
        var menuItems = document.querySelectorAll('.menu li');
        menuItems.forEach(function (item) {
          item.classList.add('margin-bottom');
        });
      });

      completeBtn.addEventListener('click', function () {
        sortableMenu.option('disabled', true);
        hiddenMenu.option('disabled', true);
        editBtn.style.display = 'inline';
        document.getElementById('hiddenMenuDiv').style.display = 'none';
        completeBtn.style.display = 'none';
        document.getElementById('menu').style.flexWrap = 'nowrap';
        document.getElementById('settingsMenu').classList.toggle('hidden');
        var menuItems = document.querySelectorAll('.menu li');
        menuItems.forEach(function (item) {
          item.classList.remove('margin-bottom');
        });
      });
    }
    function showMenu() {
      fetch('/categories')
        .then(response => response.json())
        .then(result => {
          const contentDiv = $('#category');
          const contentMenu = $(`<ul class="menu" id='menu'></ul>`);
          contentDiv.empty();
          if ("categories" in result) {
            result["categories"].forEach(category => {
              innerText = category;
              if ("categoriesStr" in result && category in result["categoriesStr"]) {
                innerText = `${result["categoriesStr"][category]}`;
              }
              contentMenu.append(`<li class="${('<%=category%>' === category) ? 'active' : ''}" id="item-${category}" data-id="${category}"><a class="single-line" href="/${category}">${innerText}</a></li>`);
            });
          }
          contentDiv.append(contentMenu);
          preventscroll();
          adjustMenuFromLocalStroage();
          setDragMenu();
        });
    }
    function adjustMenuFromLocalStroage() {
      ['menu', 'hiddenMenu'].forEach(function (key, index) {
        var order = localStorage.getItem(key);
        if (order) {
          order = JSON.parse(order);
          var menu = document.getElementById(key);
          order.forEach(function (id) {
            var element = document.getElementById(`item-${id}`);
            if (element) {
              menu.appendChild(element);
            }
          });
        }
      });
    }

    function findClosestDate(targetDate, availableDates) {
      let closestDate = availableDates[0];
      let closestDiff = Math.abs(targetDate - closestDate);
      for (let i = 1; i < availableDates.length; i++) {
        const diff = Math.abs(targetDate - availableDates[i]);
        if (diff < closestDiff) {
          closestDiff = diff;
          closestDate = availableDates[i];
        }
      }
      return closestDate;
    }

    function triggerAllCheckboxes() {
      let checkboxes = document.querySelectorAll('.toggleCheckbox');
      checkboxes.forEach(checkbox => {
        checkbox.dispatchEvent(new Event('change', {
          'bubbles': true
        }));
      });
    }

    function fetchData(date, category) {
      <% if (loggedIn) { %>
        updateDate(date);
      <% } %>
        console.log(category + ' ' + date);
      fetch(`/${category}/${date}`)
        .then(response => response.json())
        .then(data => {
          console.log(data);
          const contentDiv = $('#content');
          contentDiv.empty();
          if ('message' in data) {
            if (data.message === 'No articles') {
              contentDiv.append(`<p>${data.message}</p>`);
              return;
            } else {
              contentDiv.append('<p>Invalid request</p>');
              return;
            }
          }

          ['New', 'Update'].forEach(
            strs => {
              contentDiv.append(`<div class="title-type">${strs}</div>`);
              data[strs].forEach(entry => {
                const entryDiv = $(`<div class="entry"></div>`);
                entryDiv.append(`<div class="entry-title">${entry.Title}</div>`);
                entryDiv.append(`<p class="entry-author authors">Authors: ${entry.Authors}</p>`);
                if (entry['arxiv_comment']) {
                  entryDiv.append(`<p class="entry-comments comments">Comments: ${entry['arxiv_comment']}</p>`);
                }
                if (entry.subject) {
                  const contentP = $(`<p class="entry-subjects subjects">Subjects: </p>`);
                  if (entry.subject.primary_subject) {
                    contentP.append(`<span class="primaryCategory">${entry.subject.primary_subject}</span>`);
                  }
                  if (entry.subject.other_subjects) {
                    entry.subject.other_subjects.forEach(subject => {
                      contentP.append(` ${subject}`);
                    });
                  }
                  entryDiv.append(contentP);
                }
                if (entry.submitTime) {
                  entryDiv.append(`<p class="entry-submitTime submitTime">Submit time: ${entry.submitTime}</p>`);
                }
                entryDiv.append(`<p class="entry-summary summary">Summary: ${entry.Summary}</p>`);
                entryDiv.append(`<button class='mobile-button' onclick="openLink('${entry['PDF Link']}')">Open PDF</button>`);
                <% if (loggedIn) { %>
                  entryDiv.append(`<button class='mobile-button' onclick="downloadurl('${entry['Arxiv ID']}','${date}', 'interesting', '<%=category%>')">Download intersting</button>`);
                  entryDiv.append(`<button class='mobile-button' onclick="downloadurl('${entry['Arxiv ID']}','${date}', 'related', '<%=category%>')">Download related</button>`);
                <% } %>
                  contentDiv.append(entryDiv);
                triggerAllCheckboxes();
                contentDiv.data('entry', entry); // Store the entry data for later use
                document.dispatchEvent(new Event('DOMContentLoaded'));
              });
            }
          )
        });
    }

    function openLink(link) {
      console.log(link);
      window.open(link, '_blank');
    }

    function formatDate(dateStr) {
      // Assuming dateStr is in the format yymmdd
      const year = '20' + dateStr.slice(0, 2);
      const month = dateStr.slice(2, 4);
      const day = dateStr.slice(4, 6);
      return `${year}-${month}-${day}`;
    };
    <% console.log(loggedIn); %>
    <% if (loggedIn) { %>
      async function updateDate(yymmdd) {
        console.log(yymmdd);
        const response = await fetch('/update-date', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            date: yymmdd,
            category: '<%= category %>'
          })
        });
        const result = await response.json();
        console.log(result); // Log the response for debugging
      };
    <% } %>
    <% if (loggedIn) { %>
      async function downloadurl(id, date, type, category) {
        console.log(id);
        const response = await fetch('/download', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            id: id,
            date: date,
            type: type,
            category: category
          })
        });
      };
    <% } %>

      function lowercaseFirstLetter(str) {
        return str.charAt(0).toLowerCase() + str.slice(1);
      }
    // Toggle settings menu
    document.getElementById('settingsBtn').addEventListener('click', function () {
      const menu = document.getElementById('settingsMenu');
      menu.classList.toggle('hidden');
    });

    // Array of all settings checkboxes
    const settingsCheckboxes = ['toggleCalendar', 'toggleAuthors', 'toggleComments', 'toggleSubjects', 'toggleSubmitTime', 'toggleSummary'];

    settingsCheckboxes.forEach(function (checkboxId) {
      const checkbox = document.getElementById(checkboxId);
      const contentId = lowercaseFirstLetter(checkboxId.replace('toggle', ''));
      console.log(contentId);
      let contents = document.querySelectorAll(`.${contentId}`);

      // Apply stored settings
      if (localStorage.getItem(checkboxId) === 'true') {
        checkbox.checked = true;
        contents.forEach(content => content.classList.remove('hidden'));
      } else if (localStorage.getItem(checkboxId) === 'false') {
        checkbox.checked = false;
        contents.forEach(content => content.classList.add('hidden'));
      }

      console.log(checkboxId);
      console.log(checkbox);
      checkbox.addEventListener('change', function () {
        let contents = document.querySelectorAll(`.${contentId}`);
        if (this.checked) {
          contents.forEach(content => content.classList.remove('hidden'));
        } else {
          contents.forEach(content => content.classList.add('hidden'));
        }
        localStorage.setItem(checkboxId, this.checked);
      });
    });
    const menuToggle = document.querySelector('.menu-toggle');

    menuToggle.addEventListener('click', function () {
      const menu = document.getElementById('category');
      if (menu.style.display === 'none' || menu.style.display === '') {
        menu.style.display = 'block';
      } else {
        menu.style.display = 'none';
      }
    });

    function preventscroll() {
      document.querySelector('.menu').addEventListener('wheel', function (e) {
        var deltaY = e.deltaY;
        var contentHeight = this.scrollHeight;
        var visibleHeight = this.offsetHeight;
        var scrollTop = this.scrollTop;

        if ((scrollTop === 0 && deltaY < 0) || (scrollTop + visibleHeight >= contentHeight && deltaY > 0)) {
          e.preventDefault();
        }
      }, { passive: false });
    }
  </script>
  <script>
    document.addEventListener("DOMContentLoaded", function () {
      renderMathInElement(document.body, {
        delimiters: [{
          left: '$$',
          right: '$$',
          display: true
        },
        {
          left: '$',
          right: '$',
          display: false
        },
        {
          left: '\\(',
          right: '\\)',
          display: false
        },
        {
          left: '\\[',
          right: '\\]',
          display: true
        }
        ],
        // • rendering keys, e.g.:
        throwOnError: false
      });


      const backToTopButton = document.getElementById('backToTop');
      let isDragging = false;

      // Function to move the button to a new position
      function moveButtonTo(pageX, pageY) {
        const shiftX = backToTopButton.offsetWidth / 2;
        const shiftY = backToTopButton.offsetHeight / 2;

        // backToTopButton.style.left = pageX - shiftX + 'px';
        backToTopButton.style.top = pageY - shiftY + 'px';
      }

      // Function to handle the start of a drag/touch event
      function startDrag(event) {
        event.preventDefault();
        isDragging = false;

        let initialX, initialY;

        if (event.type === 'mousedown') {
          initialX = event.clientX;
          initialY = event.clientY;
        } else if (event.type === 'touchstart') {
          initialX = event.touches[0].clientX;
          initialY = event.touches[0].clientY;
        }

        // Function to handle movement (both mouse and touch)
        function onMove(moveEvent) {
          isDragging = true;
          let currentX, currentY;

          if (moveEvent.type === 'mousemove') {
            currentX = moveEvent.clientX;
            currentY = moveEvent.clientY;
          } else if (moveEvent.type === 'touchmove') {
            currentX = moveEvent.touches[0].clientX;
            currentY = moveEvent.touches[0].clientY;
          }

          moveButtonTo(currentX, currentY);
        }

        // Function to clean up after drag/touch end
        function endDrag() {
          document.removeEventListener('mousemove', onMove);
          document.removeEventListener('mouseup', endDrag);
          document.removeEventListener('touchmove', onMove);
          document.removeEventListener('touchend', endDrag);
        }

        document.addEventListener('mousemove', onMove);
        document.addEventListener('mouseup', endDrag);
        document.addEventListener('touchmove', onMove, { passive: false });
        document.addEventListener('touchend', endDrag);
      }

      backToTopButton.addEventListener('touchstart', () => {
        isDragging = false;
        backToTopButton.classList.add('active'); // 添加按下效果
      });

      // Add event listeners for mouse events
      backToTopButton.addEventListener('mousedown', startDrag);

      // Add event listeners for touch events
      backToTopButton.addEventListener('touchstart', startDrag, { passive: false });

      backToTopButton.addEventListener('click', () => {
        if (isDragging) {
          return;
        }
        window.scrollTo({ top: 0, behavior: 'smooth' });
      });

      backToTopButton.addEventListener('touchend', () => {
        backToTopButton.classList.remove('active');
        if (isDragging) {
          return;
        }
        window.scrollTo({ top: 0, behavior: 'smooth' });
      });

      backToTopButton.ondragstart = function () {
        return false;
      };

    });
  </script>
</body>

</html>